//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""gameplay"",
            ""id"": ""16e842ba-9eb6-4e64-ae29-7ac3a17b20a0"",
            ""actions"": [
                {
                    ""name"": ""moveHorizontal"",
                    ""type"": ""Button"",
                    ""id"": ""812e593b-1ef5-4e4b-a1a1-523dc29792f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""moveVertical"",
                    ""type"": ""Button"",
                    ""id"": ""75bedcef-21de-4984-9ec0-a790579e3c17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePress"",
                    ""type"": ""Value"",
                    ""id"": ""9d75509a-286f-4e85-8d75-561497d7a55f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChargeAttack"",
                    ""type"": ""Button"",
                    ""id"": ""1b578742-ed7b-4dbb-a0bf-8ac41e77753c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""af92b6a4-3c21-48ff-8369-f0e34b3b7b3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0a553624-3b9a-4c75-964b-2fcdc97e0c59"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveHorizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""07c4c0c0-cbdf-48b9-bd41-63f15087b53e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""137a7345-a384-4e4c-bb3b-9c7c6ef8a1cc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6e5722a1-b61c-499d-bf81-ad3b8ccfa219"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveVertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""410a48a5-51db-43eb-a618-5b2370588ad4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ecb69dc4-1e75-4659-8a5b-1e0b33d72007"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5aaa8a88-a03e-4f64-9f61-f6889e3a9398"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""playerControlScheme"",
                    ""action"": ""MousePress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d2c1b27-62ad-490e-821d-1ae51b36d106"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""playerControlScheme"",
                    ""action"": ""ChargeAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d19c32d-7e51-4c2f-a2af-03c4038b4046"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""controlScheme"",
            ""bindingGroup"": ""controlScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""playerControlScheme"",
            ""bindingGroup"": ""playerControlScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // gameplay
        m_gameplay = asset.FindActionMap("gameplay", throwIfNotFound: true);
        m_gameplay_moveHorizontal = m_gameplay.FindAction("moveHorizontal", throwIfNotFound: true);
        m_gameplay_moveVertical = m_gameplay.FindAction("moveVertical", throwIfNotFound: true);
        m_gameplay_MousePress = m_gameplay.FindAction("MousePress", throwIfNotFound: true);
        m_gameplay_ChargeAttack = m_gameplay.FindAction("ChargeAttack", throwIfNotFound: true);
        m_gameplay_Escape = m_gameplay.FindAction("Escape", throwIfNotFound: true);
    }

    ~@PlayerActions()
    {
        UnityEngine.Debug.Assert(!m_gameplay.enabled, "This will cause a leak and performance issues, PlayerActions.gameplay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // gameplay
    private readonly InputActionMap m_gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_gameplay_moveHorizontal;
    private readonly InputAction m_gameplay_moveVertical;
    private readonly InputAction m_gameplay_MousePress;
    private readonly InputAction m_gameplay_ChargeAttack;
    private readonly InputAction m_gameplay_Escape;
    public struct GameplayActions
    {
        private @PlayerActions m_Wrapper;
        public GameplayActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @moveHorizontal => m_Wrapper.m_gameplay_moveHorizontal;
        public InputAction @moveVertical => m_Wrapper.m_gameplay_moveVertical;
        public InputAction @MousePress => m_Wrapper.m_gameplay_MousePress;
        public InputAction @ChargeAttack => m_Wrapper.m_gameplay_ChargeAttack;
        public InputAction @Escape => m_Wrapper.m_gameplay_Escape;
        public InputActionMap Get() { return m_Wrapper.m_gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @moveHorizontal.started += instance.OnMoveHorizontal;
            @moveHorizontal.performed += instance.OnMoveHorizontal;
            @moveHorizontal.canceled += instance.OnMoveHorizontal;
            @moveVertical.started += instance.OnMoveVertical;
            @moveVertical.performed += instance.OnMoveVertical;
            @moveVertical.canceled += instance.OnMoveVertical;
            @MousePress.started += instance.OnMousePress;
            @MousePress.performed += instance.OnMousePress;
            @MousePress.canceled += instance.OnMousePress;
            @ChargeAttack.started += instance.OnChargeAttack;
            @ChargeAttack.performed += instance.OnChargeAttack;
            @ChargeAttack.canceled += instance.OnChargeAttack;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @moveHorizontal.started -= instance.OnMoveHorizontal;
            @moveHorizontal.performed -= instance.OnMoveHorizontal;
            @moveHorizontal.canceled -= instance.OnMoveHorizontal;
            @moveVertical.started -= instance.OnMoveVertical;
            @moveVertical.performed -= instance.OnMoveVertical;
            @moveVertical.canceled -= instance.OnMoveVertical;
            @MousePress.started -= instance.OnMousePress;
            @MousePress.performed -= instance.OnMousePress;
            @MousePress.canceled -= instance.OnMousePress;
            @ChargeAttack.started -= instance.OnChargeAttack;
            @ChargeAttack.performed -= instance.OnChargeAttack;
            @ChargeAttack.canceled -= instance.OnChargeAttack;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @gameplay => new GameplayActions(this);
    private int m_controlSchemeSchemeIndex = -1;
    public InputControlScheme controlSchemeScheme
    {
        get
        {
            if (m_controlSchemeSchemeIndex == -1) m_controlSchemeSchemeIndex = asset.FindControlSchemeIndex("controlScheme");
            return asset.controlSchemes[m_controlSchemeSchemeIndex];
        }
    }
    private int m_playerControlSchemeSchemeIndex = -1;
    public InputControlScheme playerControlSchemeScheme
    {
        get
        {
            if (m_playerControlSchemeSchemeIndex == -1) m_playerControlSchemeSchemeIndex = asset.FindControlSchemeIndex("playerControlScheme");
            return asset.controlSchemes[m_playerControlSchemeSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnMoveHorizontal(InputAction.CallbackContext context);
        void OnMoveVertical(InputAction.CallbackContext context);
        void OnMousePress(InputAction.CallbackContext context);
        void OnChargeAttack(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
}
